package IF1.DiagnosticsDIAPI

import Infrastructure.Bali.BasicTypes.* from "Infrastructure/Bali/coma/BasicTypes.fidl"
import IF1.DiagnosticsDIAPI.diagnosticsDITypes.* from "IF1/DiagnosticsDIAPI/coma/diagnosticsDITypes.fidl"

/*
	The interface provides services for use by components which need to supply HIL data through diagnostic channels.
	This is beeing enhanced to send data to a more general HIL data service, which will send HIL messages but also send data to IF1 test clients.
	It is highly recommended to review the function specification and specification for testing scenarios for using and implementing this interface.
	
	\note HMI clients typically must not subscribe to any events on this service. Events are only for test clients.
*/
interface HILService
{
	version { major 2 minor 0 }

	/*
		Used to trigger the sending of a HIL value or other measurement data to the diagnostic server.
		Used by HMI and applications under test to log HIL values.
		\remark The clientID is also stored internally for each data record. So when retrieving the buffer content, the IF1 client which created that record is known.
	*/
	method sendHILValue fireAndForget
	{
		in
		{
			/*
				HIL ID as managed by the HIL code generation. This ID will be specified in some project header files and will be automatically generated from the list of HIL signals provided in the specification.
			*/
			Int32 hilID
			/*
				HIL message value
			*/
			Int32 value
			/*
				Timestamp value, e.g. CPU cycles or milliseconds since system startup.
			*/
			Int64 timestamp
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Mark current message buffer content in HILService implementation to be examined.
		Test clients are notified about that.
		This may lead to saving the buffer content to disk.
	*/
	method markAsIncident fireAndForget
	{
		in
		{
			/*
				Current timestamp value.
			*/
			Int64 timestamp
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Retrieve the complete content of the data buffer of the HILService.
		This is used by test clients in case of an incident notification or on initialization. Afterwards test clients will likely use event notification.
	*/
	method getBufferContent
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HILDataList returnResult
		}
	}
	/*
		Retrieve mapping between current (internal) timestamp to system clock time.
		Test clients may call this periodically or at certain points in data analysis to update their knowledge about the relationship between the current HILService timestamp value and the cluster system clock.
		
		The service implementation must calculate a timestamp value in the same way as clients would do when sending HIL values and also retrieve current system time.
		\see sendHILValue
	*/
	method getTimestampMapping
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HILTimestampMapping returnResult
		}
	}
	/*
		Clients must subscribe to a service's events in order to receive them.
		Events are used to notify the clients asynchronously of any changes of state or data.
	*/
	method subscribe
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Unsubscribe a client. It will no longer receive events from this service.
	*/
	method unsubscribe
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Notifies test clients about incoming new HIL data.
		\remark Note that, as for all events in IF1, the service implementation must set the clientID parameter to the clientID which triggered this event, that is, the client which called sendHILValue.
		\see sendHILValue
	*/
	broadcast incomingHILValue
	{
		out
		{
			/*
				HIL or measurement point ID
			*/
			Int32 hilID
			/*
				HIL message or measurement data value
			*/
			Int32 value
			/*
				Timestamp value, e.g. CPU cycles or milliseconds since system startup.
			*/
			Int64 timestamp
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Notifies test clients that someone marked the current situation as an incident.
		\see markAsIncident
	*/
	broadcast incidentOccured
	{
		out
		{
			/*
				Timestamp value that has been passed to markAsIncident.
			*/
			Int64 timestamp
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
}

