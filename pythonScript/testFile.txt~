/*
    This file has been generated by UML->Franca generator plug-in

         Plug-in version: 1.0
            Package name: DiagnosticsDIAPI
             Source file: DiagnosticsDIAPI.sbs
    !!! DO NOT EDIT MANUALLY OR YOUR CHANGES WILL BE OVERWRITTEN UPON NEXT GENERATION !!!
*/
package IF1.DiagnosticsDIAPI

import Infrastructure.Bali.BasicTypes.* from "Infrastructure/Bali/coma/BasicTypes.fidl"
import IF1.DiagnosticsDIAPI.DTCServiceTypes.* from "IF1/DiagnosticsDIAPI/coma/DTCServiceTypes.fidl"

/*
    The interface provides services for use by components which need to supply HIL data through diagnostic channels.
*/
interface DTCService
{
    version { major 0 minor 1 }

    /*
        Used to report DTC (Diagnostic Trouble Code) status (active ot inactive). Can be called periodically.
        The additional processing in terms of debouncing, storing, adding additional data, reporting over diagnostics, etc. will be done by the service.
    */
    method getHUDWhitePointConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            HUDWhitePointConfiguration returnResult
        }
    }

    method setHUDWhitePointConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            HUDWhitePointConfiguration value
        }
    }

    /*
        The operation provides any HUD-relevant configuration which is not profile dependent.
    */
    method getHUDConfiguration
    {
        out
        {
            HUDConfiguration returnResult
        }
    }

    /*
        The operation is used to update the HUD-relevant configuration from HMI.
    */
    method setHUDConfiguration fireAndForget
    {
        in
        {
            /*
                New values for the HUD configuration attributes
            */
            HUDConfiguration value
            S16 clientID
        }
    }

    /*
        Returns the variant coding of the G-Meter functionality.
    */
    method getGMeterConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            GMeterConfiguration returnResult
        }
    }

    /*
        Used to set the variant coding of the G-Meter functionality.
    */
    method setGMeterConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            GMeterConfiguration value
        }
    }

    /*
        Returns the variant coding of the Startup screen functionality.
    */
    method getStartupScreenConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            StartupScreenConfiguration returnResult
        }
    }

    method setStartupScreenConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            StartupScreenConfiguration value
        }
    }

    /*
        Returns the variant coding of the offroad functionality.
    */
    method getOffroadConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            OffroadConfigurationType returnResult
        }
    }


