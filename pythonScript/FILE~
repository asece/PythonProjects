/*
    This file has been generated by UML->Franca generator plug-in

         Plug-in version: 1.0
            Package name: DiagnosticsDIAPI
             Source file: DiagnosticsDIAPI.sbs
    !!! DO NOT EDIT MANUALLY OR YOUR CHANGES WILL BE OVERWRITTEN UPON NEXT GENERATION !!!
*/
package IF1.DiagnosticsDIAPI

import Infrastructure.Bali.BasicTypes.* from "Infrastructure/Bali/coma/BasicTypes.fidl"
import IF1.DiagnosticsDIAPI.AcousticOutputTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/AcousticOutputTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.DriveAssistTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/DriveAssistTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.DrivingInformationTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/DrivingInformationTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.GeneralDiagnosticTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/GeneralDiagnosticTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.HUDTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/HUDTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.RepairServicesTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/RepairServicesTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.VehicleIndicatorsTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/VehicleIndicatorsTypesTypes.fidl"
import IF1.DiagnosticsDIAPI.VehicleStateTypesTypes.* from "IF1/DiagnosticsDIAPI/coma/VehicleStateTypesTypes.fidl"

/*
    General diagnostics provided interface definition
*/
interface GeneralDiagnosticsDIService
{
    version { major 3 minor 0 }

    /*
        Returns the global coding configuration shared between features.
    */
    method getGlobalConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            GlobalConfiguration returnResult
        }
    }

    /*
        Updates the global coding configuration shared between features.
    */
    method setGlobalConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            GlobalConfiguration value
        }
    }

    /*
        Returns the general settings coding configuration shared between features.
        
    */
    method getGeneralSettingsConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            GeneralSettingsConfiguration returnResult
        }
    }

    /*
        Updates the general settings coding configuration shared between features.
    */
    method setGeneralSettingsConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            GeneralSettingsConfiguration value
        }
    }

    /*
        Returns the default general settings coding configuration shared between features.
        
        
    */
    method getGeneralSettingsDefaultConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            GeneralSettingsConfiguration returnResult
        }
    }

    /*
        Updates the general settings default coding configuration shared between features.
        
    */
    method setGeneralSettingsDefaultConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            GeneralSettingsConfiguration value
        }
    }

    /*
        Returns the speedometer feature coding configuration.
    */
    method getSpeedometerConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            SpeedometerConfiguration returnResult
        }
    }

    /*
        Used to modify the speedometer feature coding configuration.
    */
    method setSpeedometerConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            SpeedometerConfiguration value
        }
    }

    /*
        Returns the tachometer feature coding configuration.
    */
    method getTachometerConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            TachometerConfiguration returnResult
        }
    }

    /*
        Used to modify the tachometer feature coding configuration.
    */
    method setTachometerConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            TachometerConfiguration value
        }
    }

    /*
        Returns the odometer feature coding configuration.
    */
    method getOdometerConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            OdometerConfiguration returnResult
        }
    }

    /*
        Used to modify the odometer feature coding configuration.
    */
    method setOdometerConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            OdometerConfiguration value
        }
    }

    /*
        Returns the coding configuration for vehicle indicators.
    */
    method getIndicatorsConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            IndicatorsConfiguration returnResult
        }
    }

    /*
        Used to modify the coding configuration for vehicle indicators.
    */
    method setIndicatorsConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            IndicatorsConfiguration value
        }
    }

    /*
        Returns the coding configuration for the transmission feature.
        
    */
    method getTransmissionConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            TransmissionConfiguration returnResult
        }
    }

    /*
        Returns the coding configuration for the ignition monitoring feature.
        
        
    */
    method getIgnitionMonitoringConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            IgnitionMonitoringConfiguration returnResult
        }
    }

    /*
        Used to modify the coding configuration for the ignition monitoring feature.
        
    */
    method setIgnitionMonitoringConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            IgnitionMonitoringConfiguration value
        }
    }

    /*
        Returns the coding configuration for the acoustic output feature.
    */
    method getAcousticOutputConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            AcousticOutputConfiguration returnResult
        }
    }

    /*
        Used to modify the coding configuration for the acoustic output feature.
        
        
    */
    method setAcousticOutputConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            AcousticOutputConfiguration value
        }
    }

    /*
        Returns the coding configuration for the ESP Roller Test function.
    */
    method getRollerTestConfiguration
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
        }
        out
        {
            RollerTestConfiguration returnResult
        }
    }

    /*
        Used to modify the coding configuration for the Roller Test feature.
    */
    method setRollerTestConfiguration fireAndForget
    {
        in
        {
            /*
                Unique client ID for identifying the caller of the operation.
            */
            S16 clientID
            RollerTestConfiguration value
        }
    }

    /*
        Used to get the variant coding of Hybrid-related features.
    */
    method getHybridConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            HybridConfiguration returnResult
        }
    }

    /*
        Used to set the variant coding of Hybrid-related features.
    */
    method setHybridConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            HybridConfiguration value
        }
    }

    /*
        Used to get the variant coding of Downhill Brake Control feature.
    */
    method getDownhillBrakeControlConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            DownhillBrakeControlConfiguration returnResult
        }
    }

    /*
        Used to set the variant coding for Downhill Brake Control feature.
    */
    method setDownhillBrakeControlConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            DownhillBrakeControlConfiguration value
        }
    }

    /*
        Returns the Adblue service configuration coding.
    */
    method getAdblueConfiguration
    {
        out
        {
            AdblueConfiguration returnResult
        }
    }

    /*
        Used to set the Adblue service configuration coding.
    */
    method setAdblueConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            AdblueConfiguration value
        }
    }

    /*
        Returns the Seatbelt service configuration coding.
    */
    method getSeatbeltConfiguration
    {
        out
        {
            SeatbeltConfiguration returnResult
        }
    }

    /*
        Used to set the Seatbelt service configuration coding.
    */
    method setSeatbeltConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            SeatbeltConfiguration value
        }
    }

    /*
        Returns the Flat Tire Warning service configuration coding.
    */
    method getFTWConfiguration
    {
        out
        {
            FTWConfiguration returnResult
        }
    }

    /*
        Used to set the Flat Tire Warning service configuration coding.
    */
    method setFTWConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            FTWConfiguration value
        }
    }

    /*
        Returns the Lane Departure Protection service configuration coding.
    */
    method getLDPConfiguration
    {
        out
        {
            LDPConfiguration returnResult
        }
    }

    /*
        Used to set the Lane Departure Protection service configuration coding.
    */
    method setLDPConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            LDPConfiguration value
        }
    }

    /*
        Returns the Assyst service configuration coding.
    */
    method getAssystConfiguration
    {
        out
        {
            AssystConfiguration returnResult
        }
    }

    /*
        Used to set the Assyst service configuration coding.
    */
    method setAssystConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            AssystConfiguration value
        }
    }

    /*
        Returns the Blind Spot Monitoring service configuration coding.
    */
    method getBSMConfiguration
    {
        out
        {
            BSMConfiguration returnResult
        }
    }

    /*
        Used to set the Blind Spot Monitoring service configuration coding.
    */
    method setBSMConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            BSMConfiguration value
        }
    }

    /*
        Returns the Special Purpose Vehicle IC service configuration coding.
    */
    method getSpecialPurposeVehicleICConfiguration
    {
        out
        {
            SpecialPurposeVehicleICConfiugration returnResult
        }
    }

    /*
        Used to set the Special Purpose Vehicle IC service configuration coding.
    */
    method setSpecialPurposeVehicleICConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            SpecialPurposeVehicleICConfiugration value
        }
    }

    /*
        Returns the TripComputer coding service configuration coding.
    */
    method getTripComputerConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            TripComputerConfiguration returnResult
        }
    }

    /*
        Used to set the TripComputer configuration service configuration coding.
    */
    method setTripComputerConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            TripComputerConfiguration value
        }
    }

    /*
        Used to get the variant coding of Eco-Score feature.
    */
    method getEcoScoreConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            EcoScoreConfiguration returnResult
        }
    }

    /*
        Used to set the variant coding of Eco-Score feature.
    */
    method setEcoScoreConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            EcoScoreConfiguration value
        }
    }

    /*
        Used to get the variant coding of Speed limit assistant functionality.
    */
    method getSLAConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            SLAConfiguration returnResult
        }
    }

    /*
        Used to set the SLA configuration service configuration coding.
    */
    method setSLAConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            SLAConfiguration value
        }
    }

    /*
        Used to get the variant coding of attention assist functionality.
    */
    method getAttentionAssistConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            AttentionAssistConfiguration returnResult
        }
    }

    /*
        Used to set the attention assist configuration coding.
    */
    method setAttentionAssistConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            AttentionAssistConfiguration value
        }
    }

    /*
        Used to get the variant coding of speed control functionality.
    */
    method getSpeedControlConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            SpeedControlConfiguration returnResult
        }
    }

    /*
        Used to set the speed control configuration coding.
    */
    method setSpeedControlConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            SpeedControlConfiguration value
        }
    }

    /*
        Used to get the variant HUD_Warp_Combined configuration.
    */
    method getHUDWarpingConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            HUDWarpConfiguration returnResult
        }
    }

    /*
        Used to set the variant HUD_Warp_Combined configuration.
    */
    method setHUDWarpingConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            HUDWarpConfiguration value
        }
    }

    /*
        Used to get the variant coding of fuel level functionality.
    */
    method getFuelLevelConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            FuelLevelConfiguration returnResult
        }
    }

    /*
        Used to set the fuel level configuration coding.
    */
    method setFuelLevelConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            FuelLevelConfiguration value
        }
    }

    /*
        Returns the HUD white point adjustment configuration coding.
    */
    method getHUDWhitePointConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            HUDWhitePointConfiguration returnResult
        }
    }

    method setHUDWhitePointConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            HUDWhitePointConfiguration value
        }
    }

    /*
        The operation provides any HUD-relevant configuration which is not profile dependent.
    */
    method getHUDConfiguration
    {
        out
        {
            HUDConfiguration returnResult
        }
    }

    /*
        The operation is used to update the HUD-relevant configuration from HMI.
    */
    method setHUDConfiguration fireAndForget
    {
        in
        {
            /*
                New values for the HUD configuration attributes
            */
            HUDConfiguration value
            S16 clientID
        }
    }

    /*
        Returns the variant coding of the G-Meter functionality.
    */
    method getGMeterConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            GMeterConfiguration returnResult
        }
    }

    /*
        Used to set the variant coding of the G-Meter functionality.
    */
    method setGMeterConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            GMeterConfiguration value
        }
    }

    /*
        Returns the variant coding of the Startup screen functionality.
    */
    method getStartupScreenConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            StartupScreenConfiguration returnResult
        }
    }

    method setStartupScreenConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            StartupScreenConfiguration value
        }
    }

    /*
        Returns the variant coding of the offroad functionality.
    */
    method getOffroadConfiguration
    {
        in
        {
            S16 clientID
        }
        out
        {
            OffroadConfigurationType returnResult
        }
    }

    /*
        Used to set the offroad configuration coding data.
    */
    method setOffroadConfiguration fireAndForget
    {
        in
        {
            S16 clientID
            OffroadConfigurationType value
        }
    }

    /*
        Get the text stored in the EEPROM that needs to be displayed when the production mode is active.
    */
    method getProductionModeStrings
    {
        out
        {
            ProductionModeStringsType returnResult
        }
    }

    /*
        Checks if the customer's diagnostics production mode is currently active.
    */
    method isProductionModeActive
    {
        out
        {
            Bool returnResult
        }
    }

    /*
        Returns the tank cap direction, like it is coded in the EEPROM.
        
        Tags
        ====
        RefTag1: SCN_TANK_CAP_POSITION
    */
    method getTankCapDirection
    {
        in
        {
            S16 clientID
        }
        out
        {
            eTankCapDirectionType returnResult
        }
    }

    /*
        Event is fired, whenever the global coding configuration has changed. The new configuration is given as parameter.
    */
    broadcast GlobalConfigurationChanged
    {
        out
        {
            GlobalConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the speedometer coding configuration has changed. The new configuration is given as parameter.
    */
    broadcast SpeedometerConfigurationChanged
    {
        out
        {
            SpeedometerConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the tachometer coding configuration has changed. The new configuration is given as parameter.
    */
    broadcast TachometerConfigurationChanged
    {
        out
        {
            TachometerConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the odometer coding configuration has changed. The new configuration is given as parameter.
    */
    broadcast OdometerConfigurationChanged
    {
        out
        {
            OdometerConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the vehicle indicators coding configuration has changed. The new configuration is given as parameter.
    */
    broadcast IndicatorsConfigurationChanged
    {
        out
        {
            IndicatorsConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the ignition monitoring configuration has changed. The new configuration is given as parameter.
        
    */
    broadcast IgnitionMonitoringConfigurationChanged
    {
        out
        {
            IgnitionMonitoringConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the acoustic output configuration has changed. The new configuration is given as parameter.
    */
    broadcast AcousticOutputConfigurationChanged
    {
        out
        {
            AcousticOutputConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the Roller Test configuration has changed. The new configuration is given as parameter.
    */
    broadcast RollerTestConfigurationChanged
    {
        out
        {
            RollerTestConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the general settings configuration has changed. The new configuration is given as parameter.
        
    */
    broadcast GeneralSettingsConfigurationChanged
    {
        out
        {
            GeneralSettingsConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the default general settings configuration has changed. The new configuration is given as parameter.
        
        
    */
    broadcast GeneralSettingsDefaultConfigurationChanged
    {
        out
        {
            GeneralSettingsConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the hybrid-related settings configuration has changed. The new configuration is given as parameter.
        
        
    */
    broadcast HybridConfigurationChanged
    {
        out
        {
            HybridConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the Downhill Brake Cotntrol variant coding has changed. The new configuration is given as parameter.
        
        
    */
    broadcast DownhillBrakeControlConfigurationChanged
    {
        out
        {
            DownhillBrakeControlConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the Adblue service configuration has changed. The new configuration is given as parameter.
    */
    broadcast AdblueConfigurationChanged
    {
        out
        {
            AdblueConfiguration value
            S16 ClientID
        }
    }

    /*
        Event is fired, whenever the Seatbelt service configuration has changed. The new configuration is given as parameter.
    */
    broadcast SeatbeltConfigurationChanged
    {
        out
        {
            SeatbeltConfiguration value
            S16 ClientID
        }
    }

    /*
        Event is fired, whenever the Flat Tire Warning service configuration has changed. The new configuration is given as parameter.
    */
    broadcast FTWConfigurationChanged
    {
        out
        {
            FTWConfiguration value
            S16 ClientID
        }
    }

    /*
        Event is fired, whenever the Lane Departure Protection service configuration has changed. The new configuration is given as parameter.
    */
    broadcast LDPConfigurationChanged
    {
        out
        {
            LDPConfiguration value
            S16 ClientID
        }
    }

    /*
        Event is fired, whenever the Assyst service configuration has changed. The new configuration is given as parameter.
    */
    broadcast AssystConfigurationChanged
    {
        out
        {
            AssystConfiguration value
            S16 ClientID
        }
    }

    broadcast BSMConfigurationChanged
    {
        out
        {
            BSMConfiguration value
            S16 ClientID
        }
    }

    broadcast SpecialPurposeVehicleICConfigurationChanged
    {
        out
        {
            SpecialPurposeVehicleICConfiugration value
            S16 ClientID
        }
    }

    /*
        Event is fired, whenever the Trip computer service configuration has changed. The new configuration is given as parameter.
    */
    broadcast TripComputerConfigurationChanged
    {
        out
        {
            TripComputerConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the eco-score settings configuration has changed. The new configuration is given as parameter.
        
        
    */
    broadcast EcoScoreConfigurationChanged
    {
        out
        {
            EcoScoreConfiguration value
            /*
                Unique client ID for identifying the client which triggered the modification.
            */
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the speed limit assistant configuration has changed. The new configuration is given as parameter.
        
    */
    broadcast SLAConfigurationChanged
    {
        out
        {
            SLAConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the attention assist configuration has changed. The new configuration is given as parameter.
    */
    broadcast AttentionAssistConfigurationChanged
    {
        out
        {
            AttentionAssistConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the speed control configuration has changed. The new configuration is given as parameter.
    */
    broadcast SpeedControlConfigurationChanged
    {
        out
        {
            SpeedControlConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the fuel level configuration has changed. The new configuration is given as parameter.
    */
    broadcast FuelLevelConfigurationChanged
    {
        out
        {
            FuelLevelConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the HUD Warping configuration has changed. The new configuration is given as parameter.
    */
    broadcast HUDWarpingConfigurationChanged
    {
        out
        {
            HUDWarpConfiguration value
            S16 clientID
        }
    }

    /*
        Event is fired, whenever the white point adjustment configuration has changed. The new configuration is given as parameter.
    */
    broadcast HUDWhitePointConfigurationChanged
    {
        out
        {
            HUDWhitePointConfiguration value
            S16 clientID
        }
    }

    /*
        The event is fired whenever there is a change in the HUD configuration.
    */
    broadcast HUDConfigurationChanged
    {
        out
        {
            /*
                Provides the updated HUD configuration attributes
            */
            HUDConfiguration value
        }
    }

    /*
        The event is fired whenever there is a change in the GMeter configuration.
    */
    broadcast GMeterConfigurationChanged
    {
        out
        {
            GMeterConfiguration value
            S16 clientID
        }
    }

    /*
        The event is fired whenever there is a change in the Startup Screen configuration.
    */
    broadcast StartupScreenConfigurationChanged
    {
        out
        {
            StartupScreenConfiguration value
            S16 clientID
        }
    }

    /*
        The event is fired whenever there is a change in the Offroad configuration.
    */
    broadcast OffroadConfigurationChanged
    {
        out
        {
            OffroadConfigurationType value
            S16 clientID
        }
    }

    broadcast ProductionModeStringsChanged
    {
        out
        {
            ProductionModeStringsType value
        }
    }

    /*
        Event is triggered on diagnostic mode changed from or into the production mode.
    */
    broadcast ProductionModeChanged
    {
        out
        {
            Bool productionModeActive
        }
    }

    /*
        Event is fired, whenever the tank cap direction has changed. The new configuration is given as parameter.
        
        Tags
        ====
        RefTag1: SCN_TANK_CAP_POSITION
    */
    broadcast TankCapDirectionChanged
    {
        out
        {
            eTankCapDirectionType value
        }
    }

}


