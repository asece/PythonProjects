package IF1.DiagnosticsDIAPI

import Infrastructure.Bali.BasicTypes.* from "Infrastructure/Bali/coma/BasicTypes.fidl"
import IF1.DiagnosticsDIAPI.diagnosticsDITypes.* from "IF1/DiagnosticsDIAPI/coma/diagnosticsDITypes.fidl"
import IF1.CommonDIAPI.commonDITypes.* from "IF1/CommonDIAPI/coma/commonDITypes.fidl"

/*
	This is the global service from which to get feature/variant coding and configuration information as well as various settings for all kinds of features and services.
	\draft This is in draft state because most of the feature codings are not available in the NCD yet.
	ToDo: Review which of this configurations are writable and will change during runtime and therefore need a notification event.
*/
interface GeneralDiagnosticsDIService
{
	version { major 2 minor 0 }

	/*
		Access HMI data containers.
		\seesignals DataContainerID
	*/
	method getDataContainer
	{
		in
		{
			/*
				Which data container to access.
			*/
			DataContainerID dataContainerID
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			DataContainer returnResult
		}
	}
	/*
		Access global configuration
		\seesignals GlobalConfiguration
	*/
	method getGlobalConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			GlobalConfiguration returnResult
		}
	}
	/*
		Set global configuration.
		\see getGlobalConfiguration
	*/
	method setGlobalConfiguration fireAndForget
	{
		in
		{
			/*
				New GlobalConfiguration object.
			*/
			GlobalConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access general settings.
		\seesignals GeneralSettingsConfiguration
	*/
	method getGeneralSettingsConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			GeneralSettingsConfiguration returnResult
		}
	}
	/*
		Update GeneralSettingsConfiguration.
		\see getGeneralSettingsConfiguration
	*/
	method setGeneralSettingsConfiguration fireAndForget
	{
		in
		{
			/*
				NewGeneralSettingsConfiguration object.
			*/
			GeneralSettingsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access general settings defaults.
		\seesignals GeneralSettingsConfiguration
	*/
	method getGeneralSettingsDefaultConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			GeneralSettingsConfiguration returnResult
		}
	}
	/*
		Update GeneralSettingsConfiguration.
		\see getGeneralSettingsDefaultConfiguration
	*/
	method setGeneralSettingsDefaultConfiguration fireAndForget
	{
		in
		{
			/*
				The new GeneralSettingsConfiguration object.
			*/
			GeneralSettingsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Speedometer feature coding.
		\see cluster.drivingInformation.SpeedometerService
		\seesignals SpeedometerConfiguration
	*/
	method getSpeedometerConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			SpeedometerConfiguration returnResult
		}
	}
	/*
		\see getSpeedometerConfiguration
	*/
	method setSpeedometerConfiguration fireAndForget
	{
		in
		{
			/*
				New SpeedometerConfig.
			*/
			SpeedometerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access RevMeter feature coding.
		\see cluster.drivingInformation.RevMeterService
		\seesignals RevMeterConfiguration
	*/
	method getRevMeterConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			RevMeterConfiguration returnResult
		}
	}
	/*
		\see getRevMeterConfiguration
	*/
	method setRevMeterConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			RevMeterConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Odometer feature coding.
		\see cluster.drivingInformation.OdometerService
	*/
	method getOdometerConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			OdometerConfiguration returnResult
		}
	}
	/*
		\see getOdometerConfiguration
	*/
	method setOdometerConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			OdometerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access indicators feature coding
		\see cluster.vehicleIndicators.VehicleIndicatorsService
		\seesignals IndicatorsConfiguration
	*/
	method getIndicatorsConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			IndicatorsConfiguration returnResult
		}
	}
	/*
		\see getIndicatorsConfiguration
	*/
	method setIndicatorsConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			IndicatorsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access transmission feature coding.
		\see cluster.drivingInformation.TransmissionService
		\seesignals TransmissionConfiguration
	*/
	method getTransmissionConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			TransmissionConfiguration returnResult
		}
	}
	/*
		Access acoustic output feature coding.
		\see cluster.vehicleWarnings.VehicleWarningsService
	*/
	method getAcousticOutputConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			AcousticOutputConfiguration returnResult
		}
	}
	/*
		\see getAcousticOutputConfiguration
	*/
	method setAcousticOutputConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			AcousticOutputConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Roller Test feature configuration.
		\see cluster.repairServices.RollerTestService
	*/
	method getRollerTestConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			RollerTestConfiguration returnResult
		}
	}
	/*
		\see getRollerTestConfiguration
	*/
	method setRollerTestConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			RollerTestConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Hybrid feature configuration
		\see cluster.drivingInformation.HybridInformationService, cluster.vehicleState.ElectricPowerSupplyService
		\seesignals HybridConfiguration
	*/
	method getHybridConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HybridConfiguration returnResult
		}
	}
	/*
		\see getHybridConfiguration
	*/
	method setHybridConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			HybridConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access AdBlue feature coding.
		\seesignals AdBlueConfiguration
	*/
	method getAdBlueConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			AdBlueConfiguration returnResult
		}
	}
	/*
		\see getAdBlueConfiguration
	*/
	method setAdBlueConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			AdBlueConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access seatbelt and door status feature coding.
		\seesignals SeatbeltsAndDoorsConfiguration
	*/
	method getSeatbeltsAndDoorsConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			SeatbeltsAndDoorsConfiguration returnResult
		}
	}
	/*
		\see SeatbeltsAndDoorsConfiguration
	*/
	method setSeatbeltsAndDoorsConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			SeatbeltsAndDoorsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Flat Tire Warning feature coding.
	*/
	method getFTWConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			FTWConfiguration returnResult
		}
	}
	/*
		\see getFTWConfiguration
	*/
	method setFTWConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			FTWConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Lane Departure Warning feature coding.
	*/
	method getLDPConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			LDPConfiguration returnResult
		}
	}
	/*
		\see getLDPConfiguration
	*/
	method setLDPConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			LDPConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Assyst feature coding.
		\see cluster.drivingInformation.AssystService
		\seesignals AssystConfiguration
	*/
	method getAssystConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			AssystConfiguration returnResult
		}
	}
	/*
		\see getAssystConfiguration
	*/
	method setAssystConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			AssystConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Blind Spot Monitoring feature coding.
	*/
	method getBSMConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			BSMConfiguration returnResult
		}
	}
	/*
		\see getBSMConfiguration
	*/
	method setBSMConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			BSMConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access Special Purpose Vehicle feature coding.
		This is named SpecialPurposeICConfiguration to avoid conflicts with NTG& IF1.
	*/
	method getSpecialPurposeVehicleICConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			SpecialPurposeVehicleICConfiugration returnResult
		}
	}
	/*
		\see getSpecialPurposeVehicleICConfiugration
	*/
	method setSpecialPurposeVehicleICConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			SpecialPurposeVehicleICConfiugration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access TripComputer feature coding.
		\see cluster.drivingInformation.TripComputerService
		\seesignals TripComputerConfiguration
	*/
	method getTripComputerConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			TripComputerConfiguration returnResult
		}
	}
	/*
		\see getTripComputerConfiguration
	*/
	method setTripComputerConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			TripComputerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access TrafficSignAssist feature coding.
		\seesignals TSAConfiguration
	*/
	method getTSAConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			TSAConfiguration returnResult
		}
	}
	/*
		\see getTSAConfiguration
	*/
	method setTSAConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			TSAConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access general HUD feature coding.
	*/
	method getHUDConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HUDConfiguration returnResult
		}
	}
	/*
		\see getHUDConfiguration
	*/
	method setHUDConfiguration fireAndForget
	{
		in
		{
			/*
				The value to set.
			*/
			HUDConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access HUD warping feature coding.
	*/
	method getHUDWarpingConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HUDWarpConfiguration returnResult
		}
	}
	/*
		\see getHUDWarpConfiguration
	*/
	method setHUDWarpingConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			HUDWarpConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access HUD whitepoint feature coding.
	*/
	method getHUDWhitePointConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			HUDWhitePointConfiguration returnResult
		}
	}
	/*
		\see getHUDWhitePointConfiguration
	*/
	method setHUDWhitePointConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			HUDWhitePointConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access FuelLevel feature coding.
		\see cluster.drivingInformation.FuelLevelService
		\seesignals FuelLevelConfiguration
	*/
	method getFuelLevelConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			FuelLevelConfiguration returnResult
		}
	}
	/*
		\see getFuelLevelConfiguration
	*/
	method setFuelLevelConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			FuelLevelConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access offroad configuration.
	*/
	method getOffroadConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			OffroadConfiguration returnResult
		}
	}
	/*
		\see getOffroadConfiguration
	*/
	method setOffroadConfiguration fireAndForget
	{
		in
		{
			/*
				Value to set.
			*/
			OffroadConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Access variant coding and diagnostics data for Gaze Control.
		\see cluster.inputDI.GazeControlService
		\seesignals GazeControlConfiguration
	*/
	method getGazeControlConfiguration
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
		out
		{
			GazeControlConfiguration returnResult
		}
	}
	/*
		Clients must subscribe to a service's events in order to receive them.
		Events are used to notify the clients asynchronously of any changes of state or data.
	*/
	method subscribe
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Unsubscribe a client. It will no longer receive events from this service.
	*/
	method unsubscribe
	{
		in
		{
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getDataContainer
		\seesignals DataContainerID
	*/
	broadcast dataContainerChanged
	{
		out
		{
			/*
				Updated data container.
			*/
			DataContainer newValue
			/*
				Which data container is updated.
			*/
			DataContainerID dataContainerID
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Notificationfor changes to GlobalConfiguration.
		\see getGlobalConfiguration
		\seesignals GlobalConfiguration
	*/
	broadcast globalConfigurationChanged
	{
		out
		{
			/*
				New GlobalConfiguration object.
			*/
			GlobalConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Change notification for GeneralSettingsConfiguration.
		\see getGeneralSettingsConfiguration
		\seesignals GeneralSettingsConfiguration
	*/
	broadcast generalSettingsConfigurationChanged
	{
		out
		{
			/*
				The new GeneralSettingsConfiguration object.
			*/
			GeneralSettingsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		Change notification for GeneralSettingsConfiguration.
		\see getGeneralSettingsDefaultConfiguration
		\seesignals GeneralSettingsConfiguration
	*/
	broadcast generalSettingsDefaultConfigurationChanged
	{
		out
		{
			/*
				The new GeneralSettingsConfiguration object.
			*/
			GeneralSettingsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getSpeedometerConfiguration
		\seesignals SpeedometerConfiguration
	*/
	broadcast speedometerConfigurationChanged
	{
		out
		{
			/*
				Updated SpeedometerConfig.
			*/
			SpeedometerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getRevMeterConfiguration
		\seesignals RevMeterConfiguration
	*/
	broadcast revMeterConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			RevMeterConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getOdometerConfiguration
	*/
	broadcast odometerConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			OdometerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getIndicatorsConfiguration
		\seesignals IndicatorsConfiguration
	*/
	broadcast indicatorsConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			IndicatorsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getTransmissionConfiguration
		\seesignals TransmissionConfiguration
	*/
	broadcast transmissionConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			TransmissionConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getAcousticOutputConfiguration
	*/
	broadcast acousticOutputConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			AcousticOutputConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getRollerTestConfiguration
	*/
	broadcast rollerTestConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			RollerTestConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getHybridConfiguration
		\seesignals HybridConfiguration
	*/
	broadcast hybridConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			HybridConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getAdBlueConfiguration
		\seesignals AdBlueConfiguration
	*/
	broadcast adBlueConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			AdBlueConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getSeatbeltsAndDoorsConfiguration
		\seesignals SeatbeltsAndDoorsConfiguration
	*/
	broadcast seatbeltsAndDoorsConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			SeatbeltsAndDoorsConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getFTWConfiguration
	*/
	broadcast fTWConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			FTWConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getLDPConfiguration
	*/
	broadcast lDPConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			LDPConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getAssystConfiguration
		\seesignals AssystConfiguration
	*/
	broadcast assystConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			AssystConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getBSMConfiguration
	*/
	broadcast bSMConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			BSMConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getSpecialPurposeVehicleICConfiugration
	*/
	broadcast specialPurposeVehicleICConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			SpecialPurposeVehicleICConfiugration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getTripComputerConfiguration
		\seesignals TripComputerConfiguration
	*/
	broadcast tripComputerConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			TripComputerConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getTSAConfiguration
		\seesignals TSAConfiguration
	*/
	broadcast tSAConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			TSAConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getHUDConfiguration
	*/
	broadcast hUDConfigurationChanged
	{
		out
		{
			/*
				Updated value.l
			*/
			HUDConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getHUDWarpConfiguration
	*/
	broadcast hUDWarpingConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			HUDWarpConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getHUDWhitePointConfiguration
	*/
	broadcast hUDWhitePointConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			HUDWhitePointConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getFuelLevelConfiguration
		\seesignals FuelLevelConfiguration
	*/
	broadcast fuelLevelConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			FuelLevelConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getOffroadConfiguration
	*/
	broadcast offroadConfigurationChanged
	{
		out
		{
			/*
				Updated value.
			*/
			OffroadConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
	/*
		\see getGazeControlConfiguration
		\seesignals GazeControlConfiguration
	*/
	broadcast gazeControlConfigurationChanged
	{
		out
		{
			/*
				Updated GazeControl configuration.
			*/
			GazeControlConfiguration newValue
			/*
				unique ID that identifies which client called a function or triggered an event by calling this function.
			*/
			Int16 clientID
		}
	}
}

